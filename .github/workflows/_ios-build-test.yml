name: ios-build-test

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
        description: Top-level label for what's being built/tested.
      sync-tag:
        required: false
        type: string
        default: ""
        description: |
          If this is set, our linter will use this to make sure that every other
          job with the same `sync-tag` is identical.
      test-matrix:
        required: true
        type: string
        description: |
          A JSON description of what configs to run later on.

env:
  GIT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  BUILD_ENVIRONMENT: ${{ inputs.build-environment }}

jobs:
  filter:
    runs-on: [self-hosted, linux.large]
    outputs:
      test-matrix: ${{ steps.filter.outputs.test-matrix }}
      is-test-matrix-empty: ${{ steps.filter.outputs.is-test-matrix-empty }}
      keep-going: ${{ steps.filter.outputs.keep-going }}
    steps:
      - name: Checkout PyTorch
        uses: pytorch/pytorch/.github/actions/checkout-pytorch@main
        with:
          fetch-depth: 1
          submodules: false

      - name: Select all requested test configurations
        id: filter
        uses: ./.github/actions/filter-test-configs
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          test-matrix: ${{ inputs.test-matrix }}

  build:
    needs: filter
    # Don't run on forked repos
    if: github.repository_owner == 'pytorch' && needs.filter.outputs.is-test-matrix-empty == 'False'
    strategy:
      matrix: ${{ fromJSON(needs.filter.outputs.test-matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    env:
      IOS_PLATFORM: ${{ matrix.ios_platform }}
      IOS_ARCH: ${{ matrix.ios_arch }}
      BUILD_LITE_INTERPRETER: ${{ matrix.use_lite_interpreter }}
      USE_PYTORCH_METAL: ${{ matrix.use_metal }}
      USE_COREML_DELEGATE: ${{ matrix.use_coreml }}
      CUSTOM_OP_LIST: ${{ matrix.use_custom_op_list }}
    timeout-minutes: 240
    steps:
      # [see note: pytorch repo ref]
      - name: Checkout PyTorch
        uses: pytorch/pytorch/.github/actions/checkout-pytorch@main

      - name: Populate CI build options
        shell: bash
        run: |
          set -ex

          if [ -n "${CUSTOM_OP_LIST:-}" ]; then
            echo "SELECTED_OP_LIST=${GITHUB_WORKSPACE}/ios/TestApp/custom_build/${CUSTOM_OP_LIST}" >> "${GITHUB_ENV}"
          fi

      - name: Install brew dependencies
        uses: nick-fields/retry@v2.8.2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 90
          command: |
            # Install dependencies
            brew install libtool

      - name: Setup miniconda for iOS
        uses: pytorch/test-infra/.github/actions/setup-miniconda@main
        with:
          python-version: "3.9"
          environment-file: .github/requirements/conda-env-iOS
          pip-requirements-file: .github/requirements/pip-requirements-iOS.txt

      - name: Setup Fastlane
        uses: nick-fields/retry@v2.8.2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 90
          command: |
            set -x

            pushd ios/TestApp
            # Install fastlane
            sudo gem install bundler && bundle install
            bundle update fastlane
            popd

      - name: Build PyTorch mobile runtime
        shell: bash
        run: |
          set -eux
          # shellcheck disable=SC1091
          export TCLLIBPATH="/usr/local/lib"
          ${CONDA_RUN} scripts/build_ios.sh

      - name: Build TestApp
        if: matrix.ios_platform == 'SIMULATOR'
        timeout-minutes: 15
        run: |
          # Run the ruby build script
          if ! [ -x "$(command -v xcodebuild)" ]; then
            echo 'Error: xcodebuild is not installed.'
            exit 1
          fi
          ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}"

      - name: Run simulator tests
        if: matrix.ios_platform == 'SIMULATOR'
        shell: bash
        run: |
          set -eux
          # shellcheck disable=SC1091
          # Use the pytorch nightly build to generate models
          ${CONDA_RUN} pip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cpu

          # Generate models for differnet backends
          pushd "${GITHUB_WORKSPACE}/ios/TestApp/benchmark"
          mkdir -p ../models
          if [ "${USE_COREML_DELEGATE}" == 1 ]; then
            ${CONDA_RUN} python coreml_backend.py
          else
            pushd "${GITHUB_WORKSPACE}"
            ${CONDA_RUN} python test/mobile/model_test/gen_test_model.py ios-test
            popd
          fi
          popd

          pushd "${GITHUB_WORKSPACE}/ios/TestApp/benchmark"
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            echo "Setting up the TestApp for LiteInterpreter"
            ruby setup.rb --lite 1
          else
            echo "Setting up the TestApp for Full JIT"
            ruby setup.rb
          fi
          popd

          pushd "${GITHUB_WORKSPACE}/ios/TestApp"
          # Instruments -s -devices
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            if [ "${USE_COREML_DELEGATE}" == 1 ]; then
              bundle exec fastlane scan --only_testing TestAppTests/TestAppTests/testCoreML
            else
              bundle exec fastlane scan --skip_testing TestAppTests/TestAppTests/testCoreML
            fi
          else
            bundle exec fastlane scan --only_testing TestAppTests/TestAppTests/testFullJIT
          fi
          popd

      - name: Dump simulator tests on failure
        if: failure() && matrix.ios_platform == 'SIMULATOR'
        run: |
          echo "Simulator Tests Logs:"
          cat /Users/runner/Library/Logs/scan/*.log

      - name: Prepare the build artifacts for upload
        shell: bash
        run: |
          set -eux

          # The structure of the folder is as follows:
          #
          # RUNNER_TEMP/
          # └── IOS_ARCH/
          #     ├── LICENSE
          #     ├── install
          #     │   ├── include
          #     │   │   └── headers
          #     │   └── lib
          #     │       ├── libXNNPACK.a
          #     │       ├── libc10.a
          #     │       ├── libclog.a
          #     │       ├── libcpuinfo.a
          #     │       ├── libeigen_blas.a
          #     │       ├── libpthreadpool.a
          #     │       ├── libpytorch_qnnpack.a
          #     │       ├── libtorch.a
          #     │       └── libtorch_cpu.a
          #     ├── src
          #     │   └── LibTorch-Lite.h
          #     └── version.txt
          SETUP_DIR="${RUNNER_TEMP}/${IOS_ARCH}"
          mkdir -p "${SETUP_DIR}/src"

          cp -R "${GITHUB_WORKSPACE}/build_ios/install" "${SETUP_DIR}"
          # Copy the umbrella header and license
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            cp "${GITHUB_WORKSPACE}/ios/LibTorch-Lite.h" "${SETUP_DIR}/src"
          else
            cp "${GITHUB_WORKSPACE}/ios/LibTorch.h" "${SETUP_DIR}/src"
          fi

          # Copy license and version
          cp "${GITHUB_WORKSPACE}/LICENSE" version.txt "${SETUP_DIR}"

      - uses: actions/upload-artifact@v3
        with:
          name: pytorch-ios-build-artifacts-${{ matrix.ios_arch }}
          if-no-files-found: error
          path: ${{ runner.temp }}/${{ matrix.ios_arch }}
